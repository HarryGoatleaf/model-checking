{
    "__type__": "Deck",
    "children": [],
    "crowdanki_uuid": "027ce826-be6b-11ec-9617-7085c239892d",
    "deck_config_uuid": "027ceeb6-be6b-11ec-9617-7085c239892d",
    "deck_configurations": [
        {
            "__type__": "DeckConfig",
            "autoplay": true,
            "buryInterdayLearning": false,
            "crowdanki_uuid": "027ceeb6-be6b-11ec-9617-7085c239892d",
            "dyn": false,
            "interdayLearningMix": 0,
            "lapse": {
                "delays": [
                    10.0
                ],
                "leechAction": 0,
                "leechFails": 8,
                "minInt": 1,
                "mult": 0.0
            },
            "maxTaken": 60,
            "name": "Default",
            "new": {
                "bury": false,
                "delays": [
                    1.0,
                    10.0
                ],
                "initialFactor": 2500,
                "ints": [
                    1,
                    4,
                    0
                ],
                "order": 1,
                "perDay": 20,
                "separate": true
            },
            "newGatherPriority": 0,
            "newMix": 0,
            "newPerDayMinimum": 0,
            "newSortOrder": 0,
            "replayq": true,
            "rev": {
                "bury": false,
                "ease4": 1.3,
                "fuzz": 0.05,
                "hardFactor": 1.2,
                "ivlFct": 1.0,
                "maxIvl": 36500,
                "minSpace": 1,
                "perDay": 100
            },
            "reviewOrder": 0,
            "timer": 0
        }
    ],
    "desc": "",
    "dyn": 0,
    "extendNew": 0,
    "extendRev": 0,
    "media_files": [
        "paste-00d31f9b2becbfe5c07dd0433db2bb621ef10446.jpg",
        "paste-062e84b5969b064631b07e9d0615624c5607f094.jpg",
        "paste-1dca9ead383e3d24fe40b4a83ef5dc2f57cdf894.jpg",
        "paste-40e5ca2aaea7d8cb3e650d719eb3572b28e623c3.jpg",
        "paste-56c24de8cc797c53fd99fd4f7c451816b47ccbfb.jpg",
        "paste-63f0446f79950c1e515f33d1ab8e0725994de7e2.jpg",
        "paste-65348898012c8e401bfbac4356870f15752fc724.jpg",
        "paste-66f7ef29affd70de50360ea80a3e4a44919465c0.jpg",
        "paste-993aeb1ca5dec0b3fb1c5a63e626a6cabe01e413.jpg",
        "paste-a5844f708c1d3923ce1cb03bb2db9e5116c8a3e0.jpg",
        "paste-d5dcee84d92d29811fc40a438c6e326380b4e8fc.jpg",
        "paste-e32849f2c16c7348016d3c88be3a118bcb10b795.jpg",
        "paste-e3e3e0a434c41cb96bd97208f603bfd56ee2ed30.jpg",
        "paste-e53b189055a306f44be444db43da983622a3642c.jpg",
        "paste-ecfa9adeb946fabdfd1ed1824830bdd5b4aa2520.jpg",
        "paste-feb8161d72e4e871eaf9b5bf52dfeda3702bd26d.jpg"
    ],
    "name": "ModelChecking",
    "note_models": [
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "css": ".card {\n font-family: arial;\n font-size: 20px;\n text-align: center;\n color: black;\n background-color: white;\n}",
            "flds": [
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Vorderseite",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "description": "",
                    "font": "Arial",
                    "media": [],
                    "name": "Rückseite",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Standard",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tags": [],
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Rückseite}}",
                    "bafmt": "",
                    "bfont": "Arial",
                    "bqfmt": "",
                    "bsize": 12,
                    "did": null,
                    "name": "Karte 1",
                    "ord": 0,
                    "qfmt": "{{Vorderseite}}"
                }
            ],
            "type": 0,
            "vers": []
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "43b6603f-c321-11ec-8bb6-181deab2103c",
            "css": ".card {\n  font-family: arial;\n  font-size: 20px;\n  text-align: center;\n  color: black;\n  background-color: white;\n}\n\n.cloze {\n font-weight: bold;\n color: blue;\n}\n.nightMode .cloze {\n color: lightblue;\n}\n",
            "flds": [
                {
                    "font": "Arial",
                    "name": "Text",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Rückseite Extra",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Lückentext-8e52e",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{cloze:Text}}<br>\n{{Rückseite Extra}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Lückentext",
                    "ord": 0,
                    "qfmt": "{{cloze:Text}}"
                }
            ],
            "type": 1
        },
        {
            "__type__": "NoteModel",
            "crowdanki_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "css": ".card {\n  font-family: arial;\n  font-size: 20px;\n  text-align: center;\n  color: black;\n  background-color: white;\n}\n",
            "flds": [
                {
                    "font": "Arial",
                    "name": "Vorderseite",
                    "ord": 0,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                },
                {
                    "font": "Arial",
                    "name": "Rückseite",
                    "ord": 1,
                    "rtl": false,
                    "size": 20,
                    "sticky": false
                }
            ],
            "latexPost": "\\end{document}",
            "latexPre": "\\documentclass[12pt]{article}\n\\special{papersize=3in,5in}\n\\usepackage[utf8]{inputenc}\n\\usepackage{amssymb,amsmath}\n\\pagestyle{empty}\n\\setlength{\\parindent}{0in}\n\\begin{document}\n",
            "latexsvg": false,
            "name": "Einfach",
            "req": [
                [
                    0,
                    "any",
                    [
                        0
                    ]
                ]
            ],
            "sortf": 0,
            "tmpls": [
                {
                    "afmt": "{{FrontSide}}\n\n<hr id=answer>\n\n{{Rückseite}}",
                    "bafmt": "",
                    "bfont": "",
                    "bqfmt": "",
                    "bsize": 0,
                    "did": null,
                    "name": "Karte 1",
                    "ord": 0,
                    "qfmt": "{{Vorderseite}}"
                }
            ],
            "type": 0
        }
    ],
    "notes": [
        {
            "__type__": "Note",
            "fields": [
                "What is a transition system?",
                "Formaly a transition system \\(T\\) is a tuple \\((S, Act, \\rightarrow, S_0, AP, L)\\)<br>where<br><ul><li>\\(S\\) countable set of <b>states</b></li><li>\\(Act\\) set of <b>actions</b></li><li>\\(\\rightarrow \\ \\subseteq S \\times Act \\times S\\) a <b>transition relation</b></li><li>\\(S_0 \\subseteq S\\) a set of <b>initial states</b></li><li> set of <b>atomic propositions</b> \\(AP\\) with</li><li> a <b>labeling function&nbsp;</b>\\(L : S \\rightarrow 2^{AP}\\) that assigns propositions to each state</li></ul>"
            ],
            "guid": "iox{z6Br=[",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is an Execution Fragment?",
                "An execution fragment of a transition system is an alternating sequence  sequence of states and actions:&nbsp;\\(\\rho = s_0 \\alpha_1 s_1 \\alpha_2 \\ ... \\text{ such that } s_i \\xrightarrow{\\alpha_{i+1}} s_{i+1}\\)"
            ],
            "guid": "bJf}/}gh:>",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When is an execution fragment maximal?",
                "An execution fragment is maximal iff. it is infinite or it is ending in a terminal state."
            ],
            "guid": "sl#};oIMr{",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When is an execution fragment initial?",
                "An execution fragment is initial iff. it starts in an initial state."
            ],
            "guid": "Fg,~yKi?Ci",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When is an execution fragment an execution?",
                "An execution is an initial &amp; maximal execution fragment. (corresponds to run on automata)"
            ],
            "guid": "Ku,>ofQWi[",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When is an execution fragment a path?",
                "Let \\(s_0 \\alpha_1 s_1 ...\\) be an execution, then \\(s_0s_1 ...\\) is a path. <br><br>In other words a path is the sequence of states of an execution."
            ],
            "guid": "o7)!2}d/+^",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "When is a state \\(s\\) <b>reachable </b>in \\(TS\\)?",
                "A state&nbsp;\\(s\\) is reachable in&nbsp;\\(TS\\)&nbsp;if s occurs in some execution of&nbsp;\\(TS\\)."
            ],
            "guid": "EY$F:-cD<:",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a trace?",
                "Let \\(s_0s_1...\\) be a path, then \\(L(s_0)L(s_1)...\\) over \\( (2^{AP}^{\\omega}) \\) is a trace. <br><br>In other words a trace is the sequence of atomic propositions that hold along a path."
            ],
            "guid": "ji+4.F*3iI",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a <b>program graph</b>?",
                "<img src=\"paste-40e5ca2aaea7d8cb3e650d719eb3572b28e623c3.jpg\">"
            ],
            "guid": "lvX1?#=rD&",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How does one translate a Program Graph into a Transition System?",
                "<img src=\"paste-ecfa9adeb946fabdfd1ed1824830bdd5b4aa2520.jpg\">"
            ],
            "guid": "yBP;Qj+{C<",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "For what is <b>interleaving </b>used for Transition Systems?",
                "We can model multi-threaded execution <strong>without shared variables</strong> by interleaving the transition systems."
            ],
            "guid": "zMkZ|I:8.1",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How is the I<b>nterleaving of transition systems</b> defined?",
                "<img src=\"paste-56c24de8cc797c53fd99fd4f7c451816b47ccbfb.jpg\">"
            ],
            "guid": "f9&T!uR5aW",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "For what is interleaving fpr program graphs used?",
                "We can model multi-threaded execution <strong>with shared variables</strong> by interleaving the program graphs."
            ],
            "guid": "u?zz:`#/|`",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How is the Interleaving of program graph defined?",
                "<img src=\"paste-993aeb1ca5dec0b3fb1c5a63e626a6cabe01e413.jpg\">"
            ],
            "guid": "P{We#r4U3>",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What problem is described with the State Expolision Problem?",
                "State space grows <strong>exponentially</strong> with number of <strong>threads</strong> and <strong>variables</strong>."
            ],
            "guid": "lK!R@bkpf)",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What are the differences between TS and Finite Automata?",
                "Transition System<br><ul><li>no accepting states</li><li>is not 'accepting' a (regular) language</li><li>may have countable infinite set of states and actions</li><li>may be infinitely branching</li><li>actions are used to 'glue' small transition systems</li><li>Most importantly: TS model reactive systems: systems that continuously interact with their environment</li></ul>"
            ],
            "guid": "IM-#W>KSNe",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the interleaving of 2 TS's when they share no variables?",
                "\\(TS(PG_1) \\ ||| \\ TS(PG_1)\\)"
            ],
            "guid": "L*;YB_eyj)",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the interleaving of 2 TS's when they share some variables?",
                "\\(TS(PG_1 \\ ||| \\ PG_2)\\)"
            ],
            "guid": "NdJczU)xv?",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": [
                "VL1+VL2"
            ]
        },
        {
            "__type__": "Note",
            "fields": [
                "How can the syntax of&nbsp;\\(\\emoga\\)-Regular Expressions be described?",
                "<img src=\"paste-d5dcee84d92d29811fc40a438c6e326380b4e8fc.jpg\"><br><ul><li>\\(\\emoga\\)-Regular Expressions denote language of <b>infinite </b>word</li></ul>"
            ],
            "guid": "Iu;&TE`u.!",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the empty language represented as a \\(\\omega\\)-regular expression?",
                "\\(\\emptyset^{\\underline{\\emga}}\\)"
            ],
            "guid": "NP~A+wRcUD",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How can the semantic of&nbsp;\\(\\emoga\\)-Regular Expressions be described?",
                "<img src=\"paste-e53b189055a306f44be444db43da983622a3642c.jpg\">"
            ],
            "guid": "B)r~14wS>R",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the <b>Linear-Time Property</b>?",
                "<img src=\"paste-1dca9ead383e3d24fe40b4a83ef5dc2f57cdf894.jpg\"><br><ul><li>property specifies the desirable traces</li><li>infinite traces&nbsp;\\(\\Rightarrow\\) \\(TS\\) is assumed to have no terminal states</li><li>\\(TS\\) satisfoes property <b>P </b>if all its 'observable' behaviours are admitted by <b>P</b></li></ul>"
            ],
            "guid": "f{_t1h=4ew",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What describes the Satisfction relation for LT properties?",
                "<img src=\"paste-66f7ef29affd70de50360ea80a3e4a44919465c0.jpg\"><br><ul><li>i.e. the \\(TS\\) does not show any behaviour that is undesirable over AP</li></ul>"
            ],
            "guid": "fS$[sE7<Jo",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "When does \\(Traces(TS) \\subseteq Traces(TS')\\) hold?",
                "<img src=\"paste-062e84b5969b064631b07e9d0615624c5607f094.jpg\">"
            ],
            "guid": "IO9HkU5sh5",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What do we know about <b>LT properties</b> when \\(Traces(TS) = Traces(TS')\\) hold?",
                "<img src=\"paste-e3e3e0a434c41cb96bd97208f603bfd56ee2ed30.jpg\">"
            ],
            "guid": "K<h(}%{^pb",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is an invariant?",
                "<ul><li>An invariant is an LT property \\(E_{inv}\\) that has the form:\\[ E_{inv} = \\Big\\{ A_0A_1A_2 \\dots \\in (2^{AP})^{\\omega} \\mid \\forall j \\geq 0. A_j \\models \\phi \\Big\\} \\] where (invariant condition) \\(\\phi\\) is a propositional logic formula over AP</li></ul>"
            ],
            "guid": "v$L,[TEoe}",
            "note_model_uuid": "027cfc3a-be6b-11ec-9617-7085c239892d",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "\\( TS \\models \\phi \\) iff {{c1:: \\( L(s) \\models \\phi\\) for all states \\(s \\in Reach(TS)\\) }}",
                ""
            ],
            "guid": "ckbSyWAbL^",
            "note_model_uuid": "43b6603f-c321-11ec-8bb6-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the invariant condition for mutual exclusion?",
                "<ul><li>in words: set of all infinite words \\(A_0A_1A_2 \\dots\\) so that \\( \\forall i \\in \\mathbb{N}. crit \\notin A_i or crit_2 \\notin A_i\\)</li><li>\\( \\phi = \\neg cirt_1 \\lor \\neg crit_2 \\)</li></ul>"
            ],
            "guid": "z,lIEYe2W$",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What are safety properties?",
                "<ul><li>safety properties may impose requirements on finite path fragments</li><li><img src=\"paste-a5844f708c1d3923ce1cb03bb2db9e5116c8a3e0.jpg\"><br></li><li><br></li></ul>"
            ],
            "guid": "bwJNv@XT+b",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Every&nbsp;{{c1::invariant}} is a safety property, but not the reverse.",
                ""
            ],
            "guid": "b</RD)n][]",
            "note_model_uuid": "43b6603f-c321-11ec-8bb6-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "For transition system TS without without terminal states and safety property \\(E_{safe}\\) holds \\dots&nbsp;",
                "<img src=\"paste-feb8161d72e4e871eaf9b5bf52dfeda3702bd26d.jpg\"><br><ul><li>\\( Traces_{fin} (TS) \\cap BadPref(E_{safe})\\) means TS that have no finite traces that are bad</li></ul>"
            ],
            "guid": "GoV=p58uHK",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What describes a closure of a property?",
                "<img src=\"paste-65348898012c8e401bfbac4356870f15752fc724.jpg\"><br><ul><li>\\(cl(P) \\) contains the set of infinite traces whose finite prefoxes are also prefixes of P or equivalently</li><li>infinite traces in the closure of P do not have a prefix that is not a prefix of P</li></ul>"
            ],
            "guid": "qKK5/3zxCi",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "For any LT property P over AP holds&nbsp;{{c1::P is a safety property if and only if \\(cl(P) = P\\)}}.",
                ""
            ],
            "guid": "ee;xXXuI%^",
            "note_model_uuid": "43b6603f-c321-11ec-8bb6-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Assuming \\(TS\\) and \\(TS'\\) are transition system (over AP) without terminal states: \\(Traces_{fin}(TS) \\subseteq Traces_{fin}(TS')\\) iff&nbsp;{{c1::for any safety property \\(E_{safe}: TS' \\models E_{safe} \\Rightarrow TS \\models E_{safe}.}}",
                ""
            ],
            "guid": "K7tyq1pk!<",
            "note_model_uuid": "43b6603f-c321-11ec-8bb6-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Assuming \\(TS\\) and \\(TS'\\) are transition system (over AP) without terminal states: \\(Traces_{fin}(TS) =Traces_{fin}(TS')\\) iff&nbsp;{{c1::\\(TS\\) and \\(TS'\\) satisfy the same safety properties.}}",
                ""
            ],
            "guid": "_&qWizbm2",
            "note_model_uuid": "43b6603f-c321-11ec-8bb6-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "For \\(TS\\) without terminal states and finite \\(TS'\\): \\(Traces(TS) \\subseteq Traces(TS') iff&nbsp;{{c1::\\(Traces_{fin}(TS) \\subseteq Traces_{fin}(TS').}}",
                ""
            ],
            "guid": "q8P(/^*<Mz",
            "note_model_uuid": "43b6603f-c321-11ec-8bb6-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the liveness property?",
                "<img src=\"paste-00d31f9b2becbfe5c07dd0433db2bb621ef10446.jpg\"><br><ul><li>a liveness property does not rule out any prefix</li><li>liveness properties are violated in 'infinite time'</li><li>Equivalently, \\(E_{live}\\) is a liveness property iff \\(cl(E_{live}) = (2^{AP})^{\\omega} \\)</li></ul>"
            ],
            "guid": "jYut:W6X>q",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Are safety and liveness properties disjoint?",
                "Yes, except for the property that doen't exclude anything \\((2a{AP})^{\\omega} \\)."
            ],
            "guid": "s)]N6!T86a",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Is any linear-time property a safety or liveness property?",
                "No, but for any LT property P there ecists an equivalent LT property P' which is a conjunction of a safety and a liveness property."
            ],
            "guid": "H]UeF0,WmA",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Safety and Liveness provide a&nbsp;{{c1::a complete characterization}} of LT properties.",
                ""
            ],
            "guid": "h|E|901nm;",
            "note_model_uuid": "43b6603f-c321-11ec-8bb6-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the <b>Decomposition theorem for LT properties</b>?",
                "<img src=\"paste-e32849f2c16c7348016d3c88be3a118bcb10b795.jpg\"><br><ul><li>Proposal: \\(P = cl(P) \\cap (P \\cup ((s^{AP})^{\\omega} \\\\ cl(P)))</li></ul>"
            ],
            "guid": "M)Ak[c6<b!",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "Let \\(P\\) be an LT property and \\(P = E_{safe} \\cap E_{live}\\) where \\(E_{safe} \\) is a safety property and \\(E_{live} \\) a liveness property. Then:",
                "<img src=\"paste-63f0446f79950c1e515f33d1ab8e0725994de7e2.jpg\"><br><ul><li>where \\(cl(P)\\) is the strongest safety property and</li><li>((2^{AP})^{\\omega} \\\\ cl(P)) the weakest liveness property</li></ul>"
            ],
            "guid": "xT$$=WG&%p",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "<div>Let&nbsp;P&nbsp;be some&nbsp;<em>persistence property</em>&nbsp;of the form “eventually forever&nbsp;ϕ”. Then it equivalent to TS⊨P</div>",
                "<ol><li>⇔∃s.(s∈Reach(TS)∧s⊭ϕ∧s&nbsp;is on cycle)</li><li>⇔∃C.(C&nbsp;is reachable&nbsp;∧C&nbsp;is a SCC∧C∩{s∈S|s⊭ϕ}≠∅)</li></ol><dl><br></dl>"
            ],
            "guid": "Lk@]O,)(3@",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is a SCC?",
                "<dl><dd>A Strongly Connected Component is a set of&nbsp;<strong>states</strong>&nbsp;C&nbsp;such that for all&nbsp;x,y∈C:&nbsp;x&nbsp;is&nbsp;<em>reachable</em>&nbsp;from&nbsp;y.</dd></dl><br>"
            ],
            "guid": "k9VQW/8dM/",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How does \"SCC method\" for checking persistence properties work?",
                "<ul><li>compute all&nbsp;<em>inclusion maximal</em>&nbsp;SCCs</li><li>remove unreachable SCCs</li><li>check for a state&nbsp;s⊨¬ϕ</li></ul>"
            ],
            "guid": "e]_CY|O$Y8",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How does the \"naïve cycle method\" for checking persistence properties work?&nbsp;",
                "<ul><li>use&nbsp;<a href=\"https://en.wikipedia.org/wiki/Depth-first_search\">DFS</a>&nbsp;to find states&nbsp;s⊨¬ϕ</li><li>use&nbsp;<em>second</em>&nbsp;DFS to check wether cycle is reachable from itself (i.e.&nbsp;belongs to cycle)</li></ul>"
            ],
            "guid": "AQWqDC[>YP",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the runtime of the \"naïve cycle method\"?",
                "$\\Theta( |V| \\cdot |E|) $"
            ],
            "guid": "nmYVW$z%9n",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "How does the \"improved cycle method\" for checking persistence properties work?&nbsp;",
                "<div><ul><li>use outer DFS to find states&nbsp;s⊨¬ϕ</li><li>use inner DFS to check wether cycle is reachable from itself&nbsp;<strong>while avoiding states visited in a previous inner DFS</strong>, i.e.&nbsp;maintain&nbsp;<strong>one</strong>&nbsp;<code>visited</code>&nbsp;set across all executions of the inner DFS.</li></ul></div>"
            ],
            "guid": "LC}z5FmyI`",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        },
        {
            "__type__": "Note",
            "fields": [
                "What is the runtime of the \"improved cycle method\"?",
                "$\\Theta( | V | + | E | )$"
            ],
            "guid": "BiVF^zsimM",
            "note_model_uuid": "43b66042-c321-11ec-b111-181deab2103c",
            "tags": []
        }
    ]
}