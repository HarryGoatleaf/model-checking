---
title: "Model Checking"
format:
  html:
    theme: darkly
    toc: true
    toc-depth: 3
    self-contained: true
    code-overflow: "wrap"
    code-line-numbers: true
---

<!--general macros -->
\newcommand{\w}{\omega}
\newcommand{\phi}{\varphi}
\newcommand{\true}{\texttt{true}}
\newcommand{\false}{\texttt{false}}

<!-- transition system macros -->
\newcommand{\Act}{\texttt{Act}}
\newcommand{\AP}{\texttt{AP}}

<!-- program graph macros -->

<!-- LTL macros -->
<!-- tomporal -->
\newcommand{\U}{\textbf{U}}
\newcommand{\R}{\textbf{R}}
\newcommand{\W}{\textbf{W}}
\newcommand{\M}{\textbf{M}}
<!-- modal -->
\newcommand{\box}{\square}
\newcommand{\dia}{\diamond}
\newcommand{\cir}{\bigcirc}
\newcommand{\next}{\bigcirc}

<!-- CTL macros -->

## Fundamental Concepts
### Transition Systems

<!--
Intuition

Program                | Automaton
:---------------------:|:---------:
state                  | nodes
stepwise behaviour     | transition
possible preconditions | init states
communication          | actions
atomic propositions    | state properties
-->

::: {#def-transition-system}
### Transition System

Formaly a transition system $T$ is a tuple 
$(S, \Act, \rightarrow, S_0, \AP, L)$
where

* $S$ countable set of **states**
* $\Act$ set of **actions**
* $\rightarrow \ \subseteq S \times \Act \times S$ a **transition relation**
* $S_0 \subseteq S$ a set of **initial states**
* set of **atomic propositions** $\AP$ with
* a **labeling function** $L : S \rightarrow 2^{\AP}$ that assigns propositions to each state
:::

::: {.callout-note}
### Differences to finite automata
* Possibly infinity state space.
* No accepting states.
* Multiple initial states.
:::

Execution Fragment
: An execution fragment of a transition system is an alternating sequence
  <!-- infinite??? -->
  sequence of states and actions:
$$ \rho = s_0 \alpha_1 s_1 \alpha_2 \ ... \text{ such that } s_i \xrightarrow{\alpha_{i+1}} s_{i+1}$$

Maximal
: An execution fragment is maximal iff. it is infinite or it is ending in a terminal state.

Initial
: An execution fragment is initial iff. it starts in an initial state.

Execution
: An execution is an initial & maximal execution fragment. (corresponds to run on automata)

Path
: Let $s_0 \alpha_1 s_1 ...$ be an execution, then $s_0s_1 ...$ is a path.
  In other words a path is the sequence of states of an execution.

Reachable fragment
: $Reach(T)$ set of states that appear on some path.

Trace
: Let $s_0s_1...$ be a path, then $L(s_0)L(s_1)...$ is a trace.
  In other words a trace is the sequence of atomic propositions that hold along a path.

### Program Graphs

Program graphs are an abstraction of (imperative) programs.

::: {#def-program-graph}
#### Program Graph

A program graph is a tuple
$$(Loc, \Act, Effect, \hookrightarrow, Loc_0, g_0)$$

where

* $Loc$ is a set of **locations** (roughtly corresponds to code lines)
* $\Act$ is a set of **actions**
* $Effect: \Act \times Eval(Var) \rightarrow Eval(Var)$ models the **effect** of actions
* $\hookrightarrow \subseteq Loc \times Cond(Var) \times \Act \times Loc$ is the **edge relation**
* $g_0 \in Cond(Var)$ is the **initial condition**
:::

### Translating Program Graphs to Transition Systems

Let $PG = (Loc, \Act, Effect, \hookrightarrow, Loc_0, g_0)$ be a program graph.
Then this can be modeled by the transition system $(S, \Act, \rightarrow I, \AP, L)$ where

* $S = Loc \times Eval(Var)$
* $\rightarrow \subseteq S \times \Act \times S$ can be deduced by the following rule
  $$\frac{l \xhookrightarrow{g:\alpha} l' \land \eta \models g} {\langle l, \eta \rangle \xrightarrow{\alpha} \langle l', Effect(\alpha, \eta) \rangle}$$
* $I = \{ \langle l, \eta \rangle | l \in Loc_0, \eta \models g_0 \}$
* $L( \langle l, \eta \rangle) = \{l\} \cup \{g \in Cond(Var) | \eta \models g \}$

### Interleaving

We can model multi-threaded execution **without shared variables** by interleaving the transition systems.

::: {#def-interleaving-trans}
#### Interleaving transition systems

Let $TS_1, TS_2$ be two transition systems.
Then
$$TS_1 \ ||| \ TS_2 := (S_1 \times S_2, \Act_1 \uplus \Act_2, \rightarrow, I_1 \times I_2, \AP_1 \uplus \AP_2, L)$$

* $L(\langle s_1, s_2 \rangle) = L_1(s_1) \cup L_2(s_2)$
* And $\rightarrow$ can be deduced by the following rule:
  $$ 
  \frac{s_1 \xrightarrow{\alpha} s_1'} 
  {\langle s_1, \textcolor{gray}{s_2} \rangle \xrightarrow{\alpha} \langle s_1', \textcolor{gray}{s_2}\rangle}
  \text{ and }
  \frac{s_2 \xrightarrow{\alpha} s_2'} 
  {\langle \textcolor{gray}{s_1}, s_2 \rangle \xrightarrow{\alpha} \langle \textcolor{gray}{s_1}, s_2'\rangle}
  $$
:::

We can model multi-threaded execution **with shared variables** by interleaving the program graphs.

::: {#def-interleaving-prog}
#### Interleaving program graphs

Let $PG_1, PG_2$ be two program graphs over the **same variables**. Then
$PG_1 \ ||| \ PG_2 := (Loc_1 \times Loc_2, \Act_1 \uplus \Act_2, Effect, \hookrightarrow,$ \
$Loc_{0,1} \uplus Loc_{0,2}, g_{0, 1} \land g_{0, 2})$

* $Effect(\alpha, \eta) = Effect_i(\alpha, \eta)$ for $\alpha \in \Act_i$.
* And $\hookrightarrow$ can be deduced by the following rule:
  $$ 
  \frac{l_1 \xhookrightarrow{g:\alpha} l_1'} 
  {\langle l_1, \textcolor{gray}{l_2} \rangle \xhookrightarrow{g:\alpha} \langle l_1', \textcolor{gray}{l_2}\rangle}
  \text{ and }
  \frac{l_2 \xhookrightarrow{g:\alpha} l_2'} 
  {\langle \textcolor{gray}{l_1}, l_2 \rangle \xhookrightarrow{g:\alpha} \langle \textcolor{gray}{l_1}, l_2'\rangle}
  $$
:::

::: {.callout-important}
In general it **does not hold** that $TS(PG_1) \ ||| \ TS(PG_1) = TS(PG_1 \ ||| \ PG_2)$
:::

::: {.callout-warning}
#### State Explosion Problem
State space grows **exponentially** with number of **threads** and **variables**.
:::

## Linear Time Properties

::: {#def-linear-time-property}
### Linear Time Property
A **linear-time property** over some atomic propositions $\AP$ is a subset of 
$\left(2^{\AP}\right)^\omega$.

A transitionsystem $TS$ satisfies a LT property $P$

$$TS \models P \text{ iff. } Traces(TS) \subseteq P$$
:::

Invariant
: LT property of the form $A^\w$ for some $A \subseteq 2^{\AP}$ i.e.
  "some property holds forever"

Persistance Property
: LT property of the form ${(2^{\AP})}^* A^\w$ i.e.
  "some property eventually holds forever"

Closure
: For a LT property $P$ the closure contains all traces $t$ such that
  for each prefix of $t$ a trace in $P$ has the same prefix.

<!-- example -->

::: {#def-safety-property}
### Safety Property
A LT property $S$ over $\AP$ is a **safety property** if for all
$\sigma \in (2^{\AP})^\omega \setminus S$
we can find a "bad prefix" $\hat{\sigma}$
such that no word in $S$ has prefix $\hat{\sigma}$.

This is equivalent to:
$$cl(S) = S$$
:::

::: {#def-liveness-property}
### Liveness Property
LT property $L$ over $\AP$ is a **liveness property** iff. it "does not exclude a any finite execution":

$$pref(L) = ({2^{\AP}})^*$$

This is equivalent to:
$$cl(L) = 2^{\AP}$$
:::

::: {#thm-trace-inclusion-lt-properties}
### LT-Properties vs Traces

Let $TS, TS'$ be transition systems without terminal states:

\begin{align}
Traces(TS) \quad & \subseteq \quad Traces(TS') \\
& \text{iff.} \\
TS' \models P \quad & \Rightarrow \quad TS \models P 
, \text{ for all LT-props } P\\
\end{align}

For **safety property** we know that:

\begin{align}
Traces_{fin}(TS) \quad & \subseteq \quad Traces_{fin}(TS') \\
& \text{iff.} \\
TS' \models P \quad & \Rightarrow \quad TS \models P 
, \text{ for all \textbf{safety} props } P\\
\end{align}
:::

::: {#cor-trace-equivalence}
$Traces(TS) = Traces(TS')$ iff. $TS$ and $TS'$ satisfy the same LT properties and analogously \
$Traces_{fin}(TS) = Traces_{fin}(TS')$ iff. $TS$ and $TS'$
satisfy the same safety properties.
:::

::: {.callout-note collapse=true}
### Finite Trace Equivalence $\neq$ Trace Equivalence

![](./pics/finite-trace-equivalence.png)

Here
$Traces_{fin}(\mathcal{T}) \subseteq Traces_{fin}(\mathcal{T'})$
but 
$Traces(\mathcal{T}) \not \subseteq Traces(\mathcal{T'})$
:::

::: {#lem-finite-image-trace}
If $\mathcal{T}'$ is image finite (ger: endlich verzweigt) we know that:

$$Traces_{fin}(\mathcal{T}) \subseteq Traces_{fin}(\mathcal{T'}) \Leftrightarrow Traces(\mathcal{T}) \not \subseteq Traces(\mathcal{T'})$$
:::

::: {#thm-decomposition}
### Decomposition Theorem

For every LT-property $P$ we can find a safety-property $E_{save}$ and a liveness-propery $E_{live}$ such that
$$P = E_{save} \cap E_{live}$$

one possible decomposition is given by

$$P = \underbrace{cl(P)}_{E_{safe}} \cap \underbrace{(P \cup ((2^\AP)^\w \setminus cl(P))}_{E_{live}}$$
:::

## $\w$-regular LT-properties

::: {#def-w-regular-expression}
#### $\w$-regular Expression
An $\w$-regular expression has the form:

$$G = E_1.F_1^\w + ... + E_n.F_n^\w$$

where $E_i, F_i$ are regular expressions.

If a LT property can be defined by an $\w$-regular expression
we call it $\w$-*regular property*
:::

::: {#def-synchronous-product}
#### Synchronous Product
Let:

* $TS := (S, \Act, \rightharpoonup, I, \AP, L)$ without terminal states
* $A := (Q, \Sigma, \rightharpoondown, Q_0, F)$ and NFA
  * $\Sigma = 2^{\AP}$ (A has to define traces)
  * $Q_0 \cap F = \emptyset$ (A can't accept $\varepsilon$ because this safetyproperty would be unsatisfiable)

Then:

$$TS \otimes A := (S', \Act, \rightarrow, I', \AP', L')$$

* $S' = S \times Q$
* $\AP' = Q$
* $L'( \langle s, q \rangle) = \{q\}$
* $\rightarrow$ can be deduced by:

$$\frac{s \xrightharpoonup{\alpha} \textcolor{orange}{t} \land q \xrightharpoondown{L(\textcolor{orange}{t})} p} {\langle {s}, {q} \rangle \xrightarrow{\alpha} \langle {\textcolor{orange}{t}}, {p} \rangle}$$

* $I' =  \{ \langle s_0, q \rangle | s_0 \in I \land \exists q_0 \in Q_0 . q_0 \xrightharpoondown{L(s_0)} q \}$
:::

::: {#thm-verifying-regular-safety-properties}
Let $TS$ be some transition system. $E_{safe}$ a safety property
and $A$ an NFA that recognizes the bad prefixes of $E_{safe}$.
Then:

$$TS \models E_{safe} \Leftrightarrow TS \otimes A \text{ has no reachable accepting states}$$
:::

::: {#def-buechi-automaton}
#### Büchi automaton

A *nondeterministic Büchi automaton* (NBA) is a tuple
$(Q, \Sigma, \delta, Q_0, F)$ where:

* $Q$ is a finite set of **states**
* $\Sigma$ is a finite **alphabet**
* $\delta: Q \times \Sigma \rightarrow 2^Q$ a **transition function**
* $Q_0 \subseteq Q$ a set of **initial states**
* $F \subseteq Q$ set of **accepting states**

**Acceptance condition**: There exists a run that **infinitely often** visits an
accepting state.
:::

Property       | NFA                        | NBA
---------------|----------------------------|----------------------------
Recognizes:    | regular languages          | $\w$-regular languages
Closure $\cup$ | union operator             | union operator
Closure $\cap$ | product construction       | GNBA product
Closure $\neg$ | build DFA and complement F | complex procedure
Determinism    | NFA = DFA                  | DBA $\subsetneq$ NBA

: NFA vs. NBA

### Verifying $\w$-regular Safety Properties

Idea
: Define Büchi automaton $\mathfrak{A}$ for _bad behaviour_ $E$.
  The atomic property $F$ labels all _accepting_ states of $\mathfrak{A}$. Check if 
  $$T \otimes \mathfrak{A} \models \text{ eventually forever } \neg F$$
  Here $\otimes$ is defined like in @def-synchronous-product.

::: {#thm-persistence-prop-check}
### Persistence Property Check

Let $P$ be some _persistence property_ of the form "$\text{eventually forever } \phi$".
Then it equivalent:

1. $\Leftrightarrow TS \models P$
2. $\Leftrightarrow \exists s. (s \in \text{Reach}(TS) \land s \not \models \phi \land s \text{ is on cycle})$
3. $\Leftrightarrow \exists C. (C \text{ is reachable } \land C \text{ is a SCC} \land C \cap \{ s \in S | s \not \models \phi \} \neq \emptyset)$

Strongly Connected Component ([SCC](https://en.wikipedia.org/wiki/Strongly_connected_component))
: Set of **states** $C$ such that for all $x, y \in C$: $x$ is _reachable_ from $y$.

### SCC Method

* compute all _inclusion maximal_ SCCs
* remove unreachable SCCs
* check for a state $s \models \neg \phi$

::: {.callout-caution}
#### Not practical
:::

### Cycle Method

**Naïve way:** $\Theta(|V| \cdot |E|)$

* use [DFS](https://en.wikipedia.org/wiki/Depth-first_search) to find states $s \models \neg \phi$
* use _second_ DFS to check wether cycle is reachable from itself (i.e. belongs to cycle)

**Imprövement:** $\Theta(|V| + |E|)$

* use outer DFS to find states $s \models \neg \phi$
* use inner DFS to check wether cycle is reachable from itself **while avoiding states visited in a previous inner DFS**, i.e. maintain **one** `visited` set across all executions of the inner DFS.

:::


<!-- lecture 6 end -->

## Linear Temporal Logic (LTL)

::: {#def-ltl}
For a set of atomic propositions $\AP$ we give the BNF grammar for LTL:

* $\phi = a \text{ for } a \in \AP$
* $\phi = \true | \phi \lor \phi | \neg \phi$
* $\phi = \cir \phi$ "next"
* $\phi = \phi \U \phi$ "until"
:::

Additionally we will use the following **derived operators**:

* the usual: \
  $\false, \lor, \leftarrow, \rightarrow, \leftrightarrow, \otimes$
* modal operators:
  * "eventually" $\dia \phi := \true \U \phi$ 
  * "always" $\box \phi := \neg \dia \neg \phi$
* temporal operators:
  * "release" $\phi \R \psi := \neg (\neg \phi \U \neg \psi)$
  * "weak until" 
    $\phi \W \psi := (\phi \U \psi) \lor \box \phi$ 
  * "strong release"
  $\phi \M \psi := (\phi \R \psi) \land \dia \phi$
  
### Equivalences

**Dualities**:

* $\neg \box \phi \equiv \dia \neg \phi$
* $\neg \cir \phi \equiv \cir \neg \phi$
* $\neg (\phi \U \psi) \equiv \neg \phi \R \neg \psi$
* $\neg (\phi \U \psi) \equiv (\phi \land \neg \psi) \R (\neg \phi \land \neg \psi)$
* $\neg (\phi \W \psi) \equiv \neg \phi \M \neg \psi$
* $\neg (\phi \W \psi) \equiv (\phi \land \neg \psi) \U (\neg \phi \land \neg \psi)$

**Absorbtion**:

* $\box \box \phi \equiv \box \phi$
* $\dia \dia \phi \equiv \dia \phi$
* $\box \dia \box \phi \equiv \dia \box \phi$
* $\dia \box \dia \phi \equiv \box \dia \phi$
* $\phi \U (\phi \U \psi) \equiv \phi \U \psi$
* $(\phi \U \psi) \U \psi \equiv \phi \U \psi$

**Distribution**:

* $\next (\phi \U \psi) \equiv (\next \phi \U \next \psi)$
* $\dia (\phi \lor \psi) \equiv \dia \phi \lor \dia \psi$
* $\box (\phi \land \psi) \equiv \box \phi \land \box \psi$

::: {.callout-caution}
#### Watch out for these false friends

* $\dia (\phi \land \psi) \not \equiv \dia \phi \land \dia \psi$
* $\box (\phi \lor \psi) \not \equiv \box \phi \lor \box \psi$

:::

**Expansion**:

* $\dia \phi \equiv \phi \lor \next \dia \phi$
* $\box \phi \equiv \phi \land \next \box \phi$
* $\phi \U \psi \equiv \psi \lor (\phi \land \next (\phi \U \psi))$

<!-- TODO: formal semantics -->
<!-- TODO: examples -->

### LTL Model Checking

<!-- TODO: maybe move this to NBA def -->
::: {#def-gnba}
### Generalized Büchi Automata

A *Generalized Non-deterministic Büchi Automaton* (GNBA) is a tuple
$(Q, \Sigma, \delta, Q_0, \mathfrak{F})$ where

$$\mathfrak{F} = \{ F_1, ..., F_k \} \text{ with } F_i \subseteq Q$$

A run $r_1r_2...$ on this automaton is **accepting** if:
$$\forall F_j. \exists^\infty i. r_i \in F_j$$
:::

::: {#def-closure}
### Closure

Let $\phi$ be an LTL-formula. 
Then the **closure** of $\phi$ contains all subformulas of $\phi$ and their negation^[where $\psi$ and $\neg \neg \psi$ are identified].
We denote the closure of $\phi$ with $cl(\phi)$.
:::

::: {#def-elementary-sets}
### Elementary Sets

Let $\phi$ be an LTL-formula. Then a set $B \subseteq cl(\phi)$ is **elementary** if it is:

1. Maximaly Consistent for $\land, \neg$
    * $\phi \land \psi \in B \Leftrightarrow \phi \in B \land \psi \in B$
    * $\phi \notin B \Leftrightarrow \neg \phi \in B$
    * $true \in cl(\phi) \Rightarrow true \in B$
2. Locally Consistent for $\U$ \
   for every $\phi \U \psi \in cl(\sigma)$:
    * $\psi \in B \Rightarrow \phi \U \psi \in B$
    * $\phi \U \psi \in B \land \psi \notin B \Rightarrow \phi \in B$

<!-- intuition/motivation: expand $\sigma = A_1A_2...$ to $B_1B_2...$ where $B_i = A_i \cup \{ \psi | \psi \models A_i, \psi \text{ subformula of } \phi\}$ -->
:::

::: {#def-ltl-to-gnba}
### LTL to GNBA

Let $\phi$ be an LTL-formula over $\AP$. 
We assume that $\phi$ only contains $\land, \neg, \next, \U$.

* $\Sigma := 2^{\AP}$
* $Q :=$ elementary sets of $\phi$
* $Q_0 :=$ all elementary sets containing $\phi$
* $B' \in \delta(B, l)$ iff.
    * $l = B \cap \AP$ i.e. all outgoing edges are labeled with $B \cap \AP$
    * $\next \phi \in B \Leftrightarrow \phi \in B'$
    * $\phi \U \psi \in B \Leftrightarrow (\psi \in B \lor (\phi \in B \land \phi \U \psi \in B'))$
* $\mathfrak{F} := \{ F_{\phi_1 \U \phi_2} \ | \ \phi_1 \U \phi_2 \in cl(\phi)\}$ where \
  $F_{\phi_1 \U \phi_2} := \{ B \in Q | \phi_1 \U \phi_2 \notin B \text{ or } \phi_2 \in B \}$
:::

::: {.callout-note}
For NBA $A$ the NBA for $\overline{A}$ has $c^{n^2}$ states in worst case.

Solution: First negate the formula and then construct the NBA. I.E. use $A_{\neg \phi} \equiv \overline{A}$.
:::

::: {.callout-note collapse=true}
### Size of NBA can be exponential

The **worst-case** runtime for constructing an NBA that recognizes a formula is **exponential**.
This is because the constructed NBA can be exponentially large.
For example for $n \in \mathbb{N}$ consider 
$$\phi_n := \bigwedge_{a \in \AP} \bigwedge_{0 \leq i < n} (\next^i a \leftrightarrow \next^{n+i} a)$$

Intuitively we can see that after reading the first $n$ characters the automaton has to remember
for all $0 \leq i < 0$ and every $a \in \AP$ if $a$ holds at position $i$.
:::

<!-- illustrate difference between TS |= ~phi and TS ~|= phi -->

::: {#def-algo-ltl-model-checking}
### Algorithm for LTL Model Checking

Given an LTL-formula $\phi$ and a transition system $TS$.

1. Calculate a GNBA $G_{\neg \phi}$ that recognizes $\neg \phi$.
2. Calculate a NBA $A_{\neg \phi}$ that recognizes the same language as $G_{\neg \phi}$.
3. Build the synchronous product $TS \otimes A_{\neg \phi}$
4. Check if $TS \otimes A_{\neg \phi} \models \dia \box \neg F$

Time complexity: $O( |TS| \cdot 2^{|\phi|} )$
:::


## Computation Tree Logic (CTL)

::: {#def-ctl}
### CTL

For a set of atomic propositions $\AP$ we give the BNF grammar for **CTL state-formulas**:

* $\Phi = a \text{ for } a \in \AP$
* $\Phi = \true \mid \Phi \lor \Phi \mid \neg \Phi$
* $\Phi = \exists \phi \mid \forall \phi$

And the following grammar for **CTL path-formulas**:

* $\phi = \cir \Phi$ "next"
* $\phi = \Phi \U \Phi$ "until"
:::

Additionally we will use the same derived operators as with @def-ltl:

::: {#def-ctl-semantics}
### CTL Semantics

TODO

The model of a CTL formula consists of a transition system and a state.

For a fixed transition system $TS$ with states $S$ we define:
$$Sat(\Phi) = \{ s \in S \mid TS, s \models \Phi \}$$

Let $S_0$ be the set of initial states of $TS$. Then we can lift the *models* relation to transition systems in the following way:

$$TS \models \Phi \quad :\Leftrightarrow \quad S_0 \subseteq Sat(\Phi)$$
:::

### CTL vs LTL

::: {#thm-from-ctl-to-ltl}
### From CTL to LTL

Let $\Phi$ be a CTL-formula and $\phi$ the LTL-formula obtained by deleting all quantifiers from $\Phi$.
Then:

$$\Phi \equiv \phi \textbf{ or } \Phi \text{ is not definable in LTL}$$
:::

::: {.callout-tip}
### From LTL to CTL

tips
:::

::: {#def-ctl-star}
### CTL *
:::

::: {#def-ctl-plus}
### CTL +
:::

::: {#thm-clt-plus-comparison}
### Comparison of CTL+
:::

### CTL Model Checking

First bring the formula into existential normal form.

\begin{align}
Sat(\true)                  &= S \\
Sat(a)                      &= \{ s \in S \mid a \in L(s) \} \\
Sat(\neg \Phi)              &= S \setminus Sat(\Phi) \\
Sat(\Phi \land \Psi)        &= Sat(\Phi) \cap Sat(\Psi) \\
Sat(\exists \next \Phi)     &= \{s \in S \mid Post(s) \cap Sat(\Phi) \neq \emptyset \}\\
Sat(\exists \box \Phi)      &= \{s \in S \mid 
                                 \exists \Phi \text{-lasso starting in }s\}\\
Sat(\exists (\Phi \U \Psi)) &= \{s \in S \mid
                                 \exists \Phi \text{-path from }s
                                 \text{ to a } \Psi \text{-node} \}\\
\end{align}

#### How to find nodes with a $\Phi$-lassos *with Fixpoints*

1. Delete all $s$ where $s \not \models \Phi$
2. Delete $s$ if it has no (undeleted) successors.
3. Repeat until no change. (This is the *fixpoint* part of the algo)

#### How to find nodes with a $\Phi$-lassos *with SCCs*

1. Delete all $s$ where $s \not \models \Phi$
2. Find all (non-trivial)^[>0 transition] SCCs. 
   These will form the loop part of the lasso.
3. Find all nodes from which an SCC from Step 2 is reachable.
   This is the rope part of the lasso.

#### How to find nodes with a $\Phi$-path to a $\Psi$-node *with Fixpoints*

1. Mark all $\Psi$-nodes
2. Mark all predecessors of marked nodes
3. Repeat until no change. (This is the *fixpoint* part of the algo)

## Complexity landscape

First we define the considered problems.

LTL Model Checking Problem (`LTL-QUERY`)
: Given $TS$ and $\phi$. Does $TS \models \phi$?

LTL Satisfiability Problem (`LTL-[UN]SAT`)
: Given $\phi$. Does a $TS$ exists such that $TS \models \phi$? [resp. $TS \not \models \phi$]

LTL Validity Problem (`LTL-VALID`)
: Given $\phi$. Does it hold for all $TS$ that $TS \models \phi$?

This can be extended in the obvious way to `CTL-QUERY`, `CTL-SAT`, `CTL-VALID`.
We assume that the reader is familiar with `P`, `NP`, `NP-hard`, `NP-complete`, `co-NP`, ...

`PSPACE`
: TM only needs polynomially large tape.

`PSPACE-hard`
: All problems $P$ such that **every** problem from `PSPACE` can be reduced to $P$.

`PSPACE-complete`
: All problems that are in `PSPACE` and `PSPACE-hard`.


::: {#thm-co-np-hard}
The LTL model-checking and sat problem are `co-NP-hard`.
:::

::: {.callout-note collapse=true}
### Reducing `HAM-CYCLE` to `LTL-UNSAT`

Because `HAM-CYCLE` is in NP we know that `LTL-SAT` is in `co-NP`.

$$\phi := \neg \left( \bigwedge_{v \in V} \dia v \land \box (v \rightarrow \next \box \neg v) \right)$$
:::

::: {#thm-pspace-complete}
The LTL model-checking problem is `PSPACE-complete`
:::

::: {.callout-note collapse=true}
### Proving `PSPACE-hard`ness of `LTL-QUERY`

:::


## Simulation and Bisimulation

::: {#def-bisimulation-relation}
### Bisimulation Relation

Let $TS, TS'$ be two transition systems.
A relation $\mathfrak{R} \subseteq (S \cup S')^2$ is a **bisimulation** for $(TS, TS')$ if:

* $\mathfrak{R}$ is symetric
* $\mathfrak{R}$ is *compatible* with the labeling: $(s, s') \in \mathfrak{R} \Rightarrow L(s) = L'(s')$
* The initial states are similar in the sense that:
    * for all $s \in S_0$ there exists $s' \in S_0'$ such that $(s, s') \in \mathfrak{R}$
    * for all $s' \in S_0'$ there exists $s \in S_0$ such that $(s, s') \in \mathfrak{R}$
* Successor states are similar^[in MaLo this property is called "Hin&Her Eigenschaft"] 
  in the sense that for all $(s, s') \in \mathfrak{R}$:
    * for all $p \in Post(s)$ there exists $p' \in Post(s')$ such that $(p, p') \in \mathfrak{R}$
    * for all $p' \in Post(s')$ there exists $p \in Post(s')$ such that $(p, p') \in \mathfrak{R}$
:::

::: {#def-ap-deterministic}
### AP Deterministic

A transition system $TS$ is **AP-deterministic** if 

* $|S_0| \leq 1$ 
* for all $A \in 2^\AP$ we have that $|Post(s) \cap \{ s' \in S | L(s') = A \}| \leq 1$
:::

::: {#thm-bisimilarity-vs-trace-equivalende}
### Bisimilarity vs Trace Equivalence
\

For transition systems $TS_1, TS_2$

$$TS_1 \sim TS_2 \Rightarrow TS_1 \equiv_{trace} TS_2$$

For **AP-deterministic** transition systems $TS_1, TS_2$

$$TS_1 \sim TS_2 \Leftrightarrow TS_1 \equiv_{trace} TS_2$$
:::

::: {#cor-bisimilarity-and-ctl-equivalence}
For  transition system TS and states $s, s'$ it is **equivalent**:

* $s \sim s'$
* $s \equiv_{CTL} s'$
* $s \equiv_{CTL*} s'$
:::

## Fairness

Fairness **limits** the set of traces we consider when doing model checking.

We want to remove traces that we consider *unrealistic*.

Which fairness notion?:

* strong fairness good for contentions
* weak fairness good for unfair scheduling

Fairness is concerned with a fair resolution of **non-determinism**.

::: {#def-ltl-fairness}
### LTL Fairness Constraints

An LTL fairness constraint is of the form:
$$fair = ufair \land sfair \land wfair$$
where

1. **unconditional** fairness constraint: $ufair = \box \dia \psi$
2. **strong** fairness constraint: $sfair = \box \dia \phi \rightarrow \box \dia \psi$
3. **weak** fairness constraint: $wfair = \dia \box \phi \rightarrow \box \dia \phi$
:::

::: {#cor-fairness-suffix}
### Fairness Suffix Property

For any fair path $\pi$ it holds

1. all suffixes of $\pi$ are fair
2. for any finite path fragment $\sigma$ the extension $\sigma.\pi$ is fair
:::

::: {#def-realisable-fairness}
### Realisable Fairness

A fairness assumption $fair$ is **realisable** for $TS$ iff. for all reachable states $s$:
$$FairPaths_{fair}(s) = \{\pi \in Paths(s) \mid \pi \models fair \} \neq \emptyset$$

this is equivalent to

Every initial finite path fragment can be completed to a fair run.
:::

::: {#cor-realisable-fairness-safety}
### Safety Properties are preserved under realisable fairness

$$TS \models E_{safe} \text{ iff. } TS \models_{fair} E_{safe}$$
:::

### LTL Fairness Model Checking

* transition system $TS$
* LTL formula $\phi$
* an LTL fairness assumption $fair$

Question: does $TS \models_{fair} \phi$

Can be reduced to normal model checking by considering $(fair \rightarrow \phi)$

### CTL Fairness Model Checking

* transition system $TS$
* CTL formula $\phi$
* an CTL fairness assumption $fair$

Question: does $TS \models_{fair} \phi$

include fairness checking by **limiting** $\forall, \exists$ quantifiers to **fair paths**.

How to change algo

* add fresh atomic propositions for fairness conditions
* when considering quantifiers check if the final path fragment is fair

How to compute $SAT_{fair} (\exists \box a)$

## Bisimulation Quotient

Ref def-bisimulation-relation

::: {#def-quotient-transition-system}
For $TS = (S, \Act, \rightarrow, I, \AP, L)$
and its coarsest bisimulation $\sim_{TS} \subseteq S \times S$.
We define the *quotient transition system*

$$TS / \sim_{TS} = (S / \sim_{TS}, \{\tau\}, \rightarrow', I', \AP, L')$$

where

* $S / \sim_{TS} = \{ [s]_\sim | s \in S \}$
* $I' = \{ [s]_\sim | s \in I \}$
* $L'([s]_\sim) = L(s)$
* $s \rightarrow' s' \Leftrightarrow [s]_\sim \rightarrow [s']_\sim$
:::

::: {#thm-quotient-ts-bisimilar}
Every transition system is bisimilar to its **bisimulation quotient**.
:::

How to find a quotient.

block
: pars of partition

super-block
: nonempty union of blocks

a partition $P$ is *finer* than another partition $P'$ iff every 
every block of $P$ is a super-block in $P'$

```
P := {(s, t) | L(s) = L(t)} // group states 
                            // with equal 
                            // atomic propositions
while (P != Refine(P))      // fixpoint iteration
  { P := Refine(P) }
```

We can refine the partition with a super-block $C$:

```
def Refine(P, C):

```

Strategies to choose $C$:

1. **Simple** (Kanalakis&Smoka): 
  try **all** blocks $O(\# \text{states} \cdot \# \text{transitions})$
2. **Advanced** (Page&Tarjan): 
    * step $n$: we split $B \in P$ into $B_1, B_2$ such that $|B_1| < |B_2|$,
    * step $n+1$: we can calc `Refine(Refine(P, B_1), B_2)` by subroutine:
    
```
def Refine(P, C, C' \ C):

```

## Simulation Preorder

::: {#def-abstraction-function}
### Abstraction Function
$f : S \rightarrow \hat{S}$ is an abstraction function if 
$f(s) = f(s') \Rightarrow L(s) = L(s')$
:::

<!-- TODO: maybe include types of abstraction -->

::: {#def-abstraction-transition-system}
### Abstraction Transition System

For $TS = (S, \textcolor{gray}{\Act}, \rightarrow, I, \textcolor{gray}{\AP}, L)$ and abstraction function
$f : S \rightarrow \hat{S}$ we define the **abstraction** of $TS$:
$$TS_f = (\hat{S}, \textcolor{gray}{\Act}, \rightarrow_f, I_f, \textcolor{gray}{AP}, L)$$

* $f(s) \rightarrow_f f(s') \Leftrightarrow s \rightarrow s'$
* $I_f = f(I)$
* $L_f(f(s)) = L(s)$ (well defined because $f$ is an abstraction)
:::

::: {#lem-abstractions-are-simulations}
The relation $\mathfrak{R} = \{ (s, f(s)) | s \in S \}$ is a **simulation** for
$(TS, TS_f)$.
:::

::: {#def-simulation-equivalence}
### Simulation Equivalence

$$TS_1 \approxeq TS_2 \quad \text{ iff. } \quad TS_1 \leq TS_2 \text{ and } TS_2 \leq TS_1$$
:::

::: {#def-universal-ctl-star}
### Universal fragment of $CTL^*$

State formulas:

$$\Phi ::= \true | \false | a | \neg a | \Phi \land \Phi | \Phi \lor \Phi | \forall \phi$$

Path formulas:

$$\phi ::= \Phi | \next \phi | \phi \land \phi | \phi \lor \phi | \phi \U \phi | \phi \R \phi$$
:::

::: {#lem-ltl-universal-ctl-star}
For every LTL formula there exists an equivalent $\forall CTL^*$ formula
:::

::: {#thm-simulation-equivalence-ctl}
### Simulation equivalence and $CTL$

Let $TS$ be a *finitely branching* and $s, s'$ states in $TS$.
Then it is equivalent:

* $\Leftrightarrow$  $s \leq s'$
* $\Leftrightarrow$ for any $\Phi \in \forall CTL^*$: $(s \models \Phi) \Leftarrow (s' \models \Phi)$
* $\Leftrightarrow$ for any $\Phi \in \forall CTL$: $(s \models \Phi) \Leftarrow (s' \models \Phi)$
* $\Leftrightarrow$ for any $\Phi \in \forall CTL_{\setminus \U, \R}$: $(s \models \Phi) \Leftarrow (s' \models \Phi)$
:::

## Stuttering

::: {#def-stutter-step}
### Stutter step

A transition $s \rightarrow s'$ is a **stutter step** if $L(s) = L(s')$
:::

::: {#def-stutter-equivalence}
### Stutter Path Equivalence
Paths $\pi_1$ and $\pi_2$ are **stutter equivalent** if
$trace(\pi_1)$ and $trace(\pi_2)$ are both of the form $A_0^+A_1^+A_2^+...$
:::

::: {#def-stutter-trace-equivalence} 
### Stutter Trace Equivalence

Transitionsystems $TS_1, TS_2$ are **stutter trace equivalent** if
$$Traces(TS_1) /_{\equiv_\text{sttrace}} \ = \ Traces(TS_2) /_{\equiv_\text{sttrace}}$$
:::

::: {#def-stutter-bisimilarity}
### Stutter Bisimilarity

:::

Stutter Path
: Trace that only stutters. We say it **diverges**.

Divergent state
: A state from which there exists a stutter path.

::: {.callout-warning}
### Stutter Bisimilarity vs Stutter Trace Equivalence
*Stutter bisimilarity* **DOES NOT** imply *stutter trace equivalence*.
This is because stutter bisimilarity does not impose constraints on stutter paths.
:::

::: {#def-divergent-sensitive-stutter-bisimilarity}
### Divergent-Sensitive Stutter Bisimilarity

Bisimilarity where divergent states are only paired with divergent states.
:::

::: {.lem-div-stutter-bisimilarity-trace-equivalence}
### Divergent-Sensitive Stutter Bisimilarity vs Stutter Trace Equivalence
Divergent-sensitive stutter trace bisimilarity *implies* stutter trace equivalence.
:::

::: {#thm-div-stutter-bisimilarity-vs-ctl}
### Divergent-Sensitive Stutter Bisimilarity vs CTL
For a **finitely branching** $TS$ and states $s, s'$ it is equivalent:

* $\Leftrightarrow$ $s \approx^{div}_{TS} s'$
* $\Leftrightarrow$ $s \equiv_{CTL_{\setminus \next}} s'$
* $\Leftrightarrow$ $s \equiv_{CTL_{\setminus \next}^*} s'$
::: 

### Refinement Algorithm

$Pre_\Pi^*(B, C)$
: All stutter-step predecessors of $C$ that are in $B$

Splitters
: A superblock $C$ is a splitter for a pars $B$ if 
  $B \neq C$, $B \cap Pre(C) \neq \emptyset$ and 
  $B \setminus Pre_\Pi^*(B, C) \neq \emptyset$
  
```
Refine(B, C) = {B ∩ Pre*(B, C), B \ Pre*(B, C)} \ ø
```

Stutter Cycle
: Cycle that only consists of stutter steps. 
  All states on a stutter cycle are *divergent-sensitive stutter bisimilar*

#### Performance Improvements

* Find SCCs that only contain stutter steps
* Collapse every Stutter SCC into a single state

Exit/Bottom state
: state in a block whose successors are all outside the block.

No stutter cycles => each block has an exit state

For finite TS without stutter cycles:

$$B \setminus Pre_\Pi^*(B, C) \neq \emptyset \Leftrightarrow Bottom(B) \setminus Pre(C) \neq \emptyset$$

Time Complexity: $O(\# \text{states} \cdot \# \text{transitions})$

::: {#def-divergence-expansion}
### Divergence Expansion

* Add new state $s_{div}$ with $L(s_{div}) = div$
* Add selfloop $s_{div} \rightarrow^\tau s_{div}$
* Add edge from every divergent state on a stutter cycle to $s_{div}$

On this expanded TS divergent-sensitive stutter bisimilarity and normal stutter bisimilarity coincide.

Destillation:
* replace $s \rightarrow s_{div}$ with $[s] \rightarrow [s]$
* delete $s_{div}$
:::

## Partial Order Reduction

Idea
: Sometimes the order of actions is not important.
  We can reduce the statespace by choosing one "representative" permutation of independent actions.
  
![Diamond](./pics/partial_order_reduction_idea.png)

::: {#def-action-deterministic}
### Action Deterministic

$TS$ is **action deterministic** iff for all states $s$:
$$s \xrightarrow{\alpha} u \land s \xrightarrow{\alpha} v \Rightarrow u=v$$
:::

::: {.callout-tip collapse="true"}
### How to make a TS action deterministic

If for some state $s$ there exists two outgoing edges with the same action $\alpha$ 
we introduce a new action $\alpha'$ and label one of the edges with it.
:::

::: {#def-action-independence}
### Action Independence

Let $TS$ be an *action-deterministic* transition system.
Then $\alpha, \beta \in \Act$ are called **independent** if for all states
with $\alpha, \beta \in \Act(s)$:
$$\beta \in \Act(\alpha(s)) \land \alpha \in \Act(\beta(s)) \land \beta(\alpha(s)) = \alpha(\beta(s))$$

![Action Independence Diamond](./pics/action_independence.png)

We say $\alpha$ is independent of $B \subseteq \Act \setminus \{\alpha\}$ iff alpha is independent of every action in $B$.

<!-- TODO: maybe improve image -->
:::

Stutter Action
: An action where each transition is a **stutter step**.

::: {#def-ample-set}
### Ample Sets

For each state $s$ we select a subset of outgoing edges $ample(s) \subseteq \Act(s)$
that satisfies the following conditions:

1. **Non-emptiness condition**
  Select at least one action in every state.
  $\forall s. ample(s) \neq \emptyset$
2. **Dependency condition** in the original TS: an action depending on 
  $ample(s)$ can only occur **after** some action in $ample(s)$ has occurred.
3. **Stutter condition** 
   If an enabled action is not selected, then all selected actions are stutter actions.
   $\forall s. (ample(s) \neq Act(s) \rightarrow ample(s) \subseteq Act_{stutter})$
4. **Cycle condition**
   Any action in $\Act(s_i)$ (in TS) with $s_i$ on a cycle in $TS_{red}$ must be selected
   in some $s_i$ on that cycle.
   
<!-- TODO: make shure finite/infinite is correkt -->
:::

<!-- maybe include naive dependency condition slide 34/52 -->

::: {#cor-dependency-condition-implies-naive-dependency}
For every $s \in Reach(TS)$ and $\alpha \in ample(s)$ we can conclude from 1. that:

*  $\alpha is independent of $Act(s) \setminus ample(s)$.
*  If there is a path 
   $s = s_0 \rightarrow^{\beta_1} ... \rightarrow^{\beta_n} s_n$ in TS
   and $\beta_1,...,\beta_n \notin ample(s)$ then:
   $\alpha$ is independent of $\{\beta_1,...,\beta_n\}$ and
   thereby $\forall_{0 \leq i \leq n} \alpha \in Act(s_i)$
:::

::: {#def-ample-set-reduction} 
### Ample Set Reduction

For $TS$ and ample sets $ample: S \rightarrow 2^\Act$
we define the **reduced** transition system
$$TS_{red} := (S', \Act, \Rightarrow, I, \AP, L_{|S'})$$

where:

* $s \Rightarrow^\alpha s'$ iff. $s \rightarrow^\alpha s' \land \alpha \in ample(s)$
* $S'$ are all states that are reachable via $\Rightarrow$
* $L_{|S'} : S \rightarrow \mathfrak{P}(\AP), s \mapsto L(s)$ 
  is the reduction of $L$ to $S'$.
:::

## Symbolic Model Checking

Evaluation
: Function that assigns a value to every variable $\nu : Var \rightarrow \{0, 1\}$

Switching Function
: A function that assigns a boolean value to an *evaluation*
  $f : 2^{Var} \rightarrow \{0, 1\}$.
  Can be used to encode sets
  
### Representing Switching Functions

<!-- TODO: maybe explain that no perfect representation exists -->

Binary Decision Tree (BDT)
: Full binary tree of depth $\#\text{variables}$
  The path to a leaf encodes an evaluation.
  
Ordered Binary Decision Diagram (OBDD)
: Acyclic Graph.
  Isomorphic subgraphs are collapsed into one node.
  
$f_v = \underbrace{(z \land (f_{succ_1(v)})) \lor (\neg z \land (f_{succ_0(v)}))}_\text{Shannon expansion}$

::: {#def-consistent-cofactor}
### Consistent Cofactor

Let $v_1 <_\rho ... <_\rho v_n$ be some variabel order and $f$ a
switching function on $Var = \{v_1,...,v_n\}$.
Then $g$ is a **consistent cofactor** iff

$$\exists i.\exists c_1,...,c_i.  (g = f|_{[v_1=c_1,...,v_i = c_i]})$$

In other words 

$$g : 2^{n-i} \rightarrow \{0, 1\} \ , \ (x_{i+1}, ... x_{n}) \mapsto f(\textcolor{gray}{c_1,...,c_i},x_{i+1}, ..., x_n)$$

<!-- include subtree image -->
:::

Reduced OBDD
: OBDD without isomorphic subtrees.

::: {#thm-universality-and-canonicity}
### Universality and Canonicity

For finite $Var$, fixed ordering and switching function.

1. There exists a ROBDD
2. Each pair of switching functions is isomorphic
:::

Essential Variable
: A variable $x$ is essential iff $f|_{[x=1]} \neq f|_{[x=0]}$.

Symmtric function
: Generalisation of kommutativity to functions with $\geq 2$ arguments.
  Means that function result is independent of permutation of inputs.
  $f(x) = f(\sigma(x))$ for every permutation $\sigma$.

::: {#lem-symmetric-functions-obdd}
### Size of ROBDD for Symmetric Functions

Let $f$ be a symmetric function with $m$ essential variables.
Then for each variable ordering the ROBDD has size $O(m^2)$
:::

Finding best permutation of variables is very hard.

Variable Sifting
: Choose some x_i. For all j try order: $x_1,...x_{j-1}, x_i, x_{j},...,x_n$

Interleaved Variable Order
: Encode binary relation $(x, y)$ with n bits as $x_1,y_1,x_2,y_2,...x_n, y_n$.
  In practice good to encode transition relations.
  
Shared OBDD
: ROBDD with multiple root nodes.
  Can be used to encode *multiple* switching functions.
  
Implementation of SOBDDs

1. **unique** table
  * entries: $\langle var(v), succ_1(v), succ_0(v) \rangle$
  * main operation: `find_or_add(z, v1, v2)`
  * keeps track of already created nodes
  * implemented using hash-tables
  
::: {#def-ITE-normal-form}
### ITE normal form

We introduce the **if-then-else** operator $ITE(g, f_1, f_2) := (g \land f_1) \lor (\neg g \land f_0)$

We can "push" substitutions inside:

$$(ITE(g, f_1, f_2)) |_{[v := b]} = ITE(g|_{[v := b]}, f_1|_{[v := b]}, f_2|_{[v := b]})$$
:::

**Convert ITE to SOBDD**:

$$\frac{f := ITE (g, f_1, f_2)}{ ITE (v^\bot, f|_{[v^\bot := 1]}, f|_{[v^\bot := 0]}) }$$

where $v^\bot$ is the least variabel according to our variable ordering.

## SAT-based Bounded Model Checking

Checks for bugs of bounded length.

Only used for LTL because CTL-counterexamples are harder to reason about.

Idea
: For a given $k$: unroll the TS to paths of length $k$ and check for property.
  Unroll formulas as well.
  
::: {#def-lassos}
An infinite path $\rho$ is a $(k, l)$-lasso iff:

$$\forall i \geq 0. \quad \rho(l+i) = \rho(k+1 + i)$$

i.e. the path is of the form

$$\underbrace{s_0 s_1 s_2 ... s_{l-1}}_\text{stem} \underbrace{(s_l ... s_k)^\w}_\text{loop}$$
:::

<!--

::: {#def-bounded-ltl-semantics}
:::

::: {#def-bounded-model-checking-encoding}
:::

-->
